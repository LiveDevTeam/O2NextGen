# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: ubuntu-latest
variables:
  location: westus3
  source-path: deploy/release-deploy/clouds/azure/terraform
  subscription: paid-subscription(f1404c6e-2728-40ae-9cd2-fee75bde4c04)
  resource-group: devops-tfstate
  storage-account: terraformstate999
  tfstate-file: terraform.tfstate
  container: tfstate
  any-if-changes: false

steps:

    # - task: AzurePowerShell@5
    #   displayName: 'Azure PowerShell script: InlineScript'
    #   inputs:
    #     azureSubscription: 'paid-subscription(f1404c6e-2728-40ae-9cd2-fee75bde4c04)'
    #     ScriptType: InlineScript
    #     Inline: '$key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(resource-group) -AccountName $(storage-account)).Value[0]'
    #     azurePowerShellVersion: LatestVersion
    # - task: qetza.replacetokens.replacetokens-task.replacetokens@5
    #   displayName: 'Replace tokens in **/*.tf'
    #   inputs:
    #   targetFiles: '**/*.tf' 
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(subscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          call az group create —location $(location) —name $(resource-group)
          call az storage account create --name $(storage-account) — resource-group $(resource-group) —location $(location) —ski Standard_LRS
          call az storage container create —name $(container)  —account-name $(storage-account)
          call az storage account key list -g $(resource-group) -n $(storage-account)
    
    - task: TerraformInstaller@0
      displayName: install Terraform v1.2.9
      inputs:
        terraformVersion: '1.2.9'

    - task: TerraformTaskV3@3
      displayName: "terraform init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(source-path)'
        backendServiceArm: '$(subscription)'
        environmentServiceNameAzureRM: '$(subscription)'
        backendAzureRmResourceGroupName: '$(resource-group)'
        backendAzureRmStorageAccountName: '$(storage-account)'
        backendAzureRmContainerName: '$(container)'
        backendAzureRmKey: '$(tfstate-file)' 


    - task: TerraformTaskV3@3
      displayName: "terraform plan -out tfplan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-out tfplan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(source-path)'
        environmentServiceNameAzureRM: '$(subscription)'
        # backendServiceArm: '$(subscription)'
        # backendAzureRmResourceGroupName: '$(resource-group)'
        # backendAzureRmStorageAccountName: '$(storage-account)'
        # backendAzureRmContainerName: '$(container)'
        # backendAzureRmKey: '$(tfstate-file)' 
        # backendAzureRmResourceGroupName: '$(resource-group)'
        # backendAzureRmStorageAccountName: '$(storage-account)'
        # backendAzureRmContainerName: '$(container)'
        # backendAzureRmKey: '$(tfstate-file)' 
    # - task: TerraformTaskV3@3
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'plan'
    #     commandOptions: '-out replan'
    #     environmentServiceNameAzureRM: 'paid-subscription(f1404c6e-2728-40ae-9cd2-fee75bde4c04)'
    - task: PowerShell@2
      displayName: detect any terraform change
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(source-path)'
        targetType: 'inline'
        script: |
          # Write-Host "LASTEXITCODE : $LASTEXITCODE"
          $plan = $(terraform show -json tfplan | ConvertFrom-Json)
          $actions = $plan.resource_changes.change.actions
          Write-Host "Terraform actions : $actions"
          if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
          {
            Write-Host "Terraform will perform the following actions : $actions"
            Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
          }
          else
          {
            Write-Host "There is no change detected in Terraform tfplan file"
          }
    
    - task: TerraformTaskV3@3
      displayName: terraform apply tfplan
      condition: eq(variables.anyTfChanges, true)
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(source-path)'
        commandOptions: 'tfplan'
        environmentServiceNameAzureRM: '$(subscription)'
        backendServiceArm: '$(subscription)'
        backendAzureRmResourceGroupName: '$(resource-group)'
        backendAzureRmStorageAccountName: '$(storage-account)'
        backendAzureRmContainerName: '$(container)'
        backendAzureRmKey: '$(tfstate-file)' 



