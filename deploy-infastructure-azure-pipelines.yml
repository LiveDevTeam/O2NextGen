# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: ubuntu-latest
variables:
  source-path: 'deploy/release-deploy/clouds/azure/terraform'
  subscription: '$(azure-subscription)'
  resource-group: devops-tfstate
  storage-account: terraform-state
  tfstate-file: terraform.tfstate
  container: tfstate
  any-if-changes: false

steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '1.2.9'

    - task: TerraformTaskV3@3
      displayName: "terraform init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(source-path)'
        backendServiceArm: '$(subscription)'
        backendAzureRmResourceGroupName: '$(resource-group)'
        backendAzureRmStorageAccountName: '$(storage-account)'
        backendAzureRmContainerName: '$(container)'
        backendAzureRmKey: '$(tfstate-file)' 

    - task: TerraformTaskV3@3
      displayName: "terraform plan -out tfplan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-out tfplan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(source-path)'
        environmentServiceNameAzureRM: '$(subscription)'
        # backendAzureRmResourceGroupName: '$(resource-group)'
        # backendAzureRmStorageAccountName: '$(storage-account)'
        # backendAzureRmContainerName: '$(container)'
        # backendAzureRmKey: '$(tfstate-file)' 
    
    - task: PowerShell@2
      displayName: detect any terraform change
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(source-path)'
        targetType: 'inline'
        script: |
          # Write-Host "LASTEXITCODE : $LASTEXITCODE"
          $plan = $(terraform show -json tfplan | ConvertFrom-Json)
          $actions = $plan.resource_changes.change.actions
          Write-Host "Terraform actions : $actions"
          if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
          {
            Write-Host "Terraform will perform the following actions : $actions"
            Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
          }
          else
          {
            Write-Host "There is no change detected in Terraform tfplan file"
          }
    
    - task: TerraformTaskV3@3
      displayName: terraform apply tfplan
      condition: eq(variables.anyTfChanges, true)
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(source-path)'
        commandOptions: 'tfplan'
        environmentServiceNameAzureRM: '$(subscription)'



