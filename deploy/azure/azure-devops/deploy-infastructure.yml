pool:
  vmImage: 'ubuntu-latest'

variables:
  subscription: paid-subscription(f1404c6e-2728-40ae-9cd2-fee75bde4c04)
  resourceGroup: devops-tfstate
  storageAccount: terraformstate999
  container: tfstate
  tfstateFile: terraform.tfstate
  anyTfChanges: false

steps:

- task: TerraformInstaller@0
  displayName: install Terraform v1.2.9
  inputs:
    terraformVersion: '1.2.9'

# - task: TerraformTaskV3@3
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/azure/azure-terraform'
#     backendServiceArm: 'paid-subscription(f1404c6e-2728-40ae-9cd2-fee75bde4c04)'
#     backendAzureRmResourceGroupName: 'devops-tfstate'
#     backendAzureRmStorageAccountName: 'terraformstate999'
#     backendAzureRmContainerName: 'tfstate'
#     backendAzureRmKey: 'terraform.tfstate'

- task: TerraformTaskV3@3
  displayName: terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/azure/azure-terraform'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: '$(tfstateFile)'
- task: TerraformTaskV3@3
  displayName: terraform plan -out=tfplan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/azure/azure-terraform'
    commandOptions: '-out=tfplan'
    # commandOptions: '-detailed-exitcode -out=tfplan'
    environmentServiceNameAzureRM: '$(subscription)'
    
- task: PowerShell@2
  displayName: detect any terraform change
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/azure/azure-terraform'
    targetType: 'inline'
    script: |
      # Write-Host "LASTEXITCODE : $LASTEXITCODE"
      $plan = $(terraform show -json tfplan | ConvertFrom-Json)
      $actions = $plan.resource_changes.change.actions
      Write-Host "Terraform actions : $actions"
      if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
      {
        Write-Host "Terraform will perform the following actions : $actions"
        Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
      }
      else
      {
        Write-Host "There is no change detected in Terraform tfplan file"
      }
- task: TerraformTaskV3@3
  displayName: terraform apply tfplan
  condition: eq(variables.anyTfChanges, true)
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/azure/azure-terraform'
    commandOptions: 'tfplan'
    environmentServiceNameAzureRM: '$(subscription)'
- task: TerraformTaskV3@3
  inputs:
    provider: 'azurerm'
    command: 'destroy'
    environmentServiceNameAzureRM: '$(subscription)'
