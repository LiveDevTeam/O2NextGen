# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: ubuntu-latest
variables:
  location: westus3
  source-path: deploy/azure/azure-terraform
  subscription: o2bionics-paid-subscription
  resource-group: devops-tfstate
  storage-account: terraformstate999
  tfstate-file: dev.terraform.tfstate
  container: tfstate
  terraform-var-file: ./dev/dev.tfvars
  any-if-changes: false
  LETS_ENCRYPT_EMAIL: live-dev@hotmail.com

steps:

    - task: AzureCLI@2
      displayName: Azure CLI - login in azure
      inputs:
        azureSubscription: '$(subscription)'
        scriptType: bash
        scriptLocation: 'inlineScript'
        inlineScript: |
          az --version
          az account show
    
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(subscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create --location $(location) --name $(resource-group)
          az storage account create --name $(storage-account) --resource-group $(resource-group) --location $(location) --sku Standard_LRS
          az storage container create --name $(container)  --account-name $(storage-account)
          az storage account keys list  -g $(resource-group) -n $(storage-account)
    
    - task: TerraformInstaller@0
      displayName: install Terraform v1.2.9
      inputs:
        terraformVersion: '1.2.9'

    - task: TerraformTaskV3@3
      displayName: "terraform init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(source-path)'
        backendServiceArm: '$(subscription)'
        environmentServiceNameAzureRM: '$(subscription)'
        backendAzureRmResourceGroupName: '$(resource-group)'
        backendAzureRmStorageAccountName: '$(storage-account)'
        backendAzureRmContainerName: '$(container)'
        backendAzureRmKey: '$(tfstate-file)' 


    - task: TerraformTaskV3@3
      displayName: "terraform plan -out tfplan -var-file=$(terraform-var-file)"
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        commandOptions: '-auto-approve -var-file=$(terraform-var-file) -lock=false'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(source-path)'
        environmentServiceNameAzureRM: '$(subscription)'
        # backendServiceArm: '$(subscription)'
        # backendAzureRmResourceGroupName: '$(resource-group)'
        # backendAzureRmStorageAccountName: '$(storage-account)'
        # backendAzureRmContainerName: '$(container)'
        # backendAzureRmKey: '$(tfstate-file)' 
        # backendAzureRmResourceGroupName: '$(resource-group)'
        # backendAzureRmStorageAccountName: '$(storage-account)'
        # backendAzureRmContainerName: '$(container)'
        # backendAzureRmKey: '$(tfstate-file)' 
    # - task: TerraformTaskV3@3
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'plan'
    #     commandOptions: '-out replan'
    #     environmentServiceNameAzureRM: 'paid-subscription(f1404c6e-2728-40ae-9cd2-fee75bde4c04)'


